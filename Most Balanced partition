def mostBalancedPartition(parent, files_size):
    # Step 1: Calculate total size of all files
    total_size = sum(files_size)
    
    # Step 2: Build an adjacency list to represent the tree
    n = len(parent)
    tree = [[] for _ in range(n)]
    for i in range(n):
        if parent[i] != -1:  # If it's not the root node
            tree[parent[i]].append(i)
    
    # Step 3: To store the subtree sizes
    subtree_size = [0] * n
    
    # Step 4: Define a DFS function to calculate subtree sizes
    def dfs(node):
        # Start with the current node's file size
        subtree_sum = files_size[node]
        # Visit all children and accumulate their sizes
        for child in tree[node]:
            subtree_sum += dfs(child)
        subtree_size[node] = subtree_sum
        return subtree_sum

    # Run DFS from the root node (which is node 0) to calculate subtree sizes
    dfs(0)
    
    # Step 5: Find the most balanced partition
    min_diff = float('inf')
    
    for i in range(1, n):  # Start from 1 because removing the root isn't an option
        partition1 = subtree_size[i]
        partition2 = total_size - partition1
        diff = abs(partition1 - partition2)
        min_diff = min(min_diff, diff)
    
    return min_diff

if __name__ == '__main__':
    import os
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    parent_count = int(input().strip())

    parent = []

    for _ in range(parent_count):
        parent_item = int(input().strip())
        parent.append(parent_item)

    files_size_count = int(input().strip())

    files_size = []

    for _ in range(files_size_count):
        files_size_item = int(input().strip())
        files_size.append(files_size_item)

    result = mostBalancedPartition(parent, files_size)

    fptr.write(str(result) + '\n')

    fptr.close()
